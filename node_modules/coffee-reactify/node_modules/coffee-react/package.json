{
  "name": "coffee-react",
  "description": "Coffeescript compiler wrapper adding coffee-react-transform CJSX support",
  "keywords": [
    "coffeescript",
    "react",
    "jsx",
    "cjsx",
    "coffee-react"
  ],
  "author": {
    "name": "James Friend"
  },
  "version": "4.0.0",
  "licenses": [
    {
      "type": "MIT",
      "url": "https://raw.github.com/jsdf/coffee-react/master/LICENSE"
    }
  ],
  "files": [
    "register.js",
    "bin/",
    "lib/"
  ],
  "main": "./lib/coffee-react-script",
  "bin": {
    "cjsx": "./bin/cjsx"
  },
  "scripts": {
    "prepublish": "cake build",
    "test": "tap test/*.coffee"
  },
  "homepage": "https://github.com/jsdf/coffee-react",
  "bugs": {
    "url": "https://github.com/jsdf/coffee-react/issues"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/jsdf/coffee-react.git"
  },
  "dependencies": {
    "coffee-react-transform": "^3.1.0",
    "coffee-script": "^1.9.1",
    "mkdirp": "^0.5.0",
    "react-tools": "^0.13.3",
    "jstransform": "^10.1.0"
  },
  "devDependencies": {
    "concat-stream": "^1.4.5",
    "react": "^0.13.1",
    "tap": "^0.7.1"
  },
  "readme": "# Coffee-React\n\nCoffee-React provides a JSX-like syntax for building [React](http://facebook.github.io/react/) components with the full awesomeness of CoffeeScript.\n\nIncluded is the `cjsx` executable, which is wrapper for `coffee`, using\n[coffee-react-transform](https://github.com/jsdf/coffee-react-transform) and\n[coffee-script](https://github.com/jashkenas/coffeescript) to transform CJSX to Javascript.\nYou can also `require()` CJSX components under [node](http://nodejs.org) for server-side rendering.\n\n### Example\n\nneat-component.cjsx\n```coffee\nNeatComponent = React.createClass\n  render: ->\n    <div className=\"neat-component\">\n      {<h1>A Component is I</h1> if @props.showTitle}\n      <hr />\n      {<p key={n}>This line has been printed {n} times</p> for n in [1..5]}\n    </div>\n```\n\ncompile it\n```bash\n$ cjsx -cb neat-component.cjsx\n```\n\nneat-component.js\n```js\n// Generated by CoffeeScript 1.9.1\nvar NeatComponent;\n\nNeatComponent = React.createClass({\n  render: function() {\n    var n;\n    return React.createElement(\"div\", {\n      \"className\": \"neat-component\"\n    }, (this.props.showTitle ? React.createElement(\"h1\", null, \"A Component is I\") : void 0), React.createElement(\"hr\", null), (function() {\n      var i, results;\n      results = [];\n      for (n = i = 1; i <= 5; n = ++i) {\n        results.push(React.createElement(\"p\", {\n          \"key\": n\n        }, \"This line has been printed \", n, \" times\"));\n      }\n      return results;\n    })());\n  }\n});\n```\n\n### Installation\n```bash\nnpm install -g coffee-react\n```\n\n#### Version compatibility\n- 3.x - React 0.13.x\n- 2.1.x - React 0.12.1\n- 2.x - React 0.12\n- 1.x - React 0.11.2\n- 0.x - React 0.11 and below\n\n### Usage\n\n```\n$ cjsx -h\n\nUsage: cjsx [options] path/to/script.cjsx -- [args]\n\nIf called without options, `cjsx` will run your script.\n\n  -b, --bare         compile without a top-level function wrapper\n  -c, --compile      compile to JavaScript and save as .js files\n  -e, --eval         pass a string from the command line as input\n  -h, --help         display this help message\n  -j, --join         concatenate the source CoffeeScript before compiling\n  -m, --map          generate source map and save as .map files\n  -n, --nodes        print out the parse tree that the parser produces\n      --nodejs       pass options directly to the \"node\" binary\n      --no-header    suppress the \"Generated by\" header\n  -o, --output       set the output directory for compiled JavaScript\n  -p, --print        print out the compiled JavaScript\n  -s, --stdio        listen for and compile scripts over stdio\n  -l, --literate     treat stdio as literate style coffee-script\n  -t, --tokens       print out the tokens that the lexer/rewriter produce\n  -v, --version      display the version number\n  -w, --watch        watch scripts for changes and rerun commands\n\n```\n\nOutput compiled JS to a file of the same name:\n```bash\n$ cjsx -c my-component.cjsx\n```\n\n#### Require .cjsx files under node\nAs with the `coffee-script` module, you need to register `.cjsx` with the module loader:\n```coffee\nrequire('coffee-react/register')\n\nComponent = require('./component.cjsx')\n\n```\n\n### Spread attributes\nA recent addition to JSX (and CJSX) is 'spread attributes' which allow merging an object of props into a component, eg:\n```coffee\nextraProps = color: 'red', speed: 'fast'\n<div color=\"blue\" {... extraProps} />\n```\nwhich is transformed to:\n```coffee\nextraProps = color: 'red', speed: 'fast'\nReact.createElement(React.DOM.div, React.__spread({\"color\": \"blue\"}, extraProps)\n```\n\n### Breaking Changes in 1.0\n\nReact 0.12 will introduce changes to the way component descriptors are constructed, where the return value of `React.createClass` is not a descriptor factory but simply the component class itself, and descriptors must be created manually using `React.createElement` or by wrapping the component class with `React.createDescriptor`.\n\nIn preparation for this, coffee-react-transform (and as a result, coffee-react) now outputs calls to `React.createElement` to construct element descriptors from component classes for you, so you won't need to [wrap your classes using `React.createFactory`](https://gist.github.com/sebmarkbage/ae327f2eda03bf165261). However, for this to work you will need to be using at least React 0.11.2, which adds `React.createElement`.\n\nIf you want the older style JSX output (which just desugars into function calls) then you need to use the 0.x branch, eg. 0.5.1.\n\nAdditionally, as of 1.0.0, all input files will be CJSX transformed, even if they don't have a `.cjsx` extension or `# @cjsx` pragma.\n\n### Related projects\n- [coffee-react-transform](https://github.com/jsdf/coffee-react-transform), the underlying parser/transformer package.\n- [node-cjsx](https://github.com/SimonDegraeve/node-cjsx): `require` CJSX files on the server (also possible with [coffee-react/register](https://github.com/jsdf/coffee-react)).\n- [coffee-reactify](https://github.com/jsdf/coffee-reactify): bundle CJSX files via [browserify](https://github.com/substack/node-browserify), see also [cjsxify](https://github.com/SimonDegraeve/cjsxify).  \n- [react-coffee-quickstart](https://github.com/SimonDegraeve/react-coffee-quickstart): equivalent to [react-quickstart](https://github.com/andreypopp/react-quickstart).\n- [sprockets preprocessor](https://github.com/jsdf/sprockets-coffee-react): use CJSX with Rails/Sprockets\n- [ruby coffee-react gem](https://github.com/jsdf/ruby-coffee-react): transform CJSX to Coffeescript under Ruby\n- [vim plugin](https://github.com/mtscout6/vim-cjsx) for syntax highlighting\n- [sublime text package](https://github.com/Guidebook/sublime-cjsx) for syntax highlighting\n- [mimosa plugin](https://github.com/mtscout6/mimosa-cjsx) for the mimosa build tool\n- [gulp plugin](https://github.com/mtscout6/gulp-cjsx) for the gulp build tool\n- [karma preprocessor](https://github.com/mtscout6/karma-cjsx-preprocessor) for karma test runner\n",
  "readmeFilename": "README.md",
  "_id": "coffee-react@4.0.0",
  "_shasum": "82f4f43a8a9ee95e3ddc18bd2dd78df8b12e39b9",
  "_from": "coffee-react@^4.0.0",
  "_resolved": "https://registry.npmjs.org/coffee-react/-/coffee-react-4.0.0.tgz"
}
