{
  "name": "coffee-react-transform",
  "description": "React JSX support for Coffeescript",
  "keywords": [
    "coffeescript",
    "react",
    "jsx",
    "cjsx",
    "coffee-react"
  ],
  "author": {
    "name": "James Friend"
  },
  "version": "3.2.0",
  "licenses": [
    {
      "type": "MIT",
      "url": "https://raw.github.com/jsdf/coffee-react-transform/master/LICENSE"
    }
  ],
  "scripts": {
    "test": "cake build && cake test",
    "prepublish": "cake build"
  },
  "files": [
    "index.js",
    "lib/",
    "bin/"
  ],
  "bin": {
    "cjsx-transform": "./bin/cjsx-transform"
  },
  "homepage": "https://github.com/jsdf/coffee-react-transform",
  "bugs": {
    "url": "https://github.com/jsdf/coffee-react-transform/issues"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/jsdf/coffee-react-transform.git"
  },
  "devDependencies": {
    "coffee-script": "^1.9.1",
    "colors": "^0.6.2",
    "diff": "^1.0.8"
  },
  "readme": "# Coffeescript React JSX Transformer\n\nProvides support for an equivalent of JSX syntax in Coffeescript (called CJSX) so you can write your Facebook React components with the full awesomeness of Coffeescript.\n\n#### Example\n\ncar-component.coffee\n\n```coffee\nCar = React.createClass\n  render: ->\n    <Vehicle doors={4} locked={isLocked()} data-colour=\"red\" on>\n      <Parts.FrontSeat />\n      <Parts.BackSeat />\n      <p className=\"seat\">Which seat can I take? {@props?.seat or 'none'}</p>\n      {# also, this is a comment }\n    </Vehicle>\n```\n\ntransform\n\n```bash\ncjsx-transform car-component.coffee\n```\n\noutput\n\n```coffee\nCar = React.createClass\n  render: ->\n    React.createElement(Vehicle, {\"doors\": (4), \"locked\": (isLocked()), \"data-colour\": \"red\", \"on\": true},\n      React.createElement(Parts.FrontSeat, null),\n      React.createElement(Parts.BackSeat, null),\n      React.createElement(\"p\", {\"className\": \"seat\"}, \"Which seat can I take? \", (@props?.seat or 'none'))\n    )\n```\n\n### Getting Started\n`coffee-react-transform` simply handles preprocessing Coffeescript with JSX-style markup into valid Coffeescript. Instead of using it directly, you may want to make use of one of these more high-level tools:\n- [coffee-react](https://github.com/jsdf/coffee-react): a drop-in replacement for the `coffee` executable, for compiling CJSX.\n- [node-cjsx](https://github.com/SimonDegraeve/node-cjsx): `require` CJSX files on the server (also possible with [coffee-react/register](https://github.com/jsdf/coffee-react)).\n- [coffee-reactify](https://github.com/jsdf/coffee-reactify): bundle CJSX files via [browserify](https://github.com/substack/node-browserify), see also [cjsxify](https://github.com/SimonDegraeve/cjsxify).\n- [cjsx-loader](https://github.com/KyleAMathews/cjsx-loader): loader module for Webpack.\n- [react-coffee-quickstart](https://github.com/SimonDegraeve/react-coffee-quickstart): equivalent to [react-quickstart](https://github.com/andreypopp/react-quickstart).\n- [coffee-react-quickstart](https://github.com/KyleAMathews/coffee-react-quickstart): Quickstart for building React single page apps using Coffeescript, Gulp, Webpack, and React-Router\n- [sprockets preprocessor](https://github.com/jsdf/sprockets-coffee-react): use CJSX with Rails/Sprockets\n- [ruby coffee-react gem](https://github.com/jsdf/ruby-coffee-react) for general ruby integration\n- [vim plugin](https://github.com/mtscout6/vim-cjsx) for syntax highlighting\n- [sublime text package](https://github.com/Guidebook/sublime-cjsx) for syntax highlighting\n- [mimosa plugin](https://github.com/mtscout6/mimosa-cjsx) for the mimosa build tool\n- [karma preprocessor](https://github.com/mtscout6/karma-cjsx-preprocessor) for karma test runner\n- [broccoli plugin](https://github.com/ghempton/broccoli-cjsx) for the broccoli build tool\n\n### CLI\n\n```bash\ncjsx-transform [input file]\n```\nOutputs Coffeescript code to stdout. Redirect it to a file or straight to the Coffeescript compiler, eg.\n```bash\ncjsx-transform examples/car.coffee | coffee -cs > car.js\n```\n\n### API\n```coffee\ntransform = require 'coffee-react-transform'\n\ntransformed = transform('...some CJSX code...')\n```\n\n### Installation\nFrom [npm](https://www.npmjs.org/):\n```bash\nnpm install -g coffee-react-transform\n```\n\n#### Version compatibility\n- 3.x - React 0.13.x\n- 2.1.x - React 0.12.1\n- 2.x - React 0.12\n- 1.x - React 0.11.2\n- 0.x - React 0.11 and below\n\n#### UMD bundle for the browser\nIf you want to use coffee-react-transform in the browser or under ExecJS or some other environment that doesn't support CommonJS modules, you can use this build provided by [BrowserifyCDN](wzrd.in), which will work as an AMD module or just a plain old script tag:\n\n[http://wzrd.in/standalone/coffee-react-transform](http://wzrd.in/standalone/coffee-react-transform)\n\n```html\n<script src=\"http://wzrd.in/standalone/coffee-react-transform\"></script>\n<script>\n  coffeeReactTransform('-> <a />');\n  // returns '-> React.createElement(\"a\", null)'\n</script>\n```\n\n### Spread attributes\nA semi-recent addition to JSX (and CJSX) is 'spread attributes' which allow merging an object of props into a component, eg:\n```coffee\nextraProps = color: 'red', speed: 'fast'\n<div color=\"blue\" {... extraProps} />\n```\nwhich is transformed to:\n```coffee\nextraProps = color: 'red', speed: 'fast'\nReact.createElement(\"div\", React.__spread({\"color\": \"blue\"},  extraProps)\n```\n\n### Tests\n\n`npm test` or `cake test` or `cake watch:test`\n\n### Changelog\n\n#### 3.1.0\n- Fix literate CoffeeScript/CJSX with single apostrophes in Markdown ([benjie](https://github.com/benjie))\n\n#### 3.0.1\n- Fixed some bugs relating to self-closing tags with spread attributes\n\n#### 3.0.0\n- Added CJSX single line comment syntax: `{# comment goes here}` ([ConradIrwin](https://github.com/ConradIrwin))\n- All lower case tags now output component names as strings (eg. DOM or custom elements), and custom element names must contain a hyphen ([AsaAyers](https://github.com/AsaAyers))\n\n#### 2.4.1\n- Made spread attribute output not create unnecessary objects\n- Output legacy JSX pragma when legacy CJSX pragma used\n\n#### 2.2.0\n- Use `React.__spread` instead of `Object.assign`\n\n### Breaking Changes in 1.0\n\nReact 0.12 will introduce changes to the way component descriptors are constructed, where the return value of `React.createClass` is not a descriptor factory but simply the component class itself, and descriptors must be created manually using `React.createElement` or by wrapping the component class with `React.createDescriptor`. In preparation for this, coffee-react-transform now outputs calls to `React.createElement` to construct element descriptors from component classes for you, so you won't need to [wrap your classes using `React.createFactory`](https://gist.github.com/sebmarkbage/ae327f2eda03bf165261). However, for this to work you will need to be using at least React 0.11.2, which adds `React.createElement`.\n\nIf you want the older style JSX output (which just desugars into function calls) then you need to use the 0.x branch, eg. 0.5.1.\n",
  "readmeFilename": "README.md",
  "_id": "coffee-react-transform@3.2.0",
  "_shasum": "56e1d0f15087a0b16f17b7a2dd25da67a0fe4e56",
  "_from": "coffee-react-transform@^3.1.0",
  "_resolved": "https://registry.npmjs.org/coffee-react-transform/-/coffee-react-transform-3.2.0.tgz"
}
